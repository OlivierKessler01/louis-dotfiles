version: '3'

services:
  # POSTGRES ------------------------------------------------------------------------------------
  postgres:
    image: postgres:13-alpine
    volumes:
      - postgres_history:/usr/local/hist
      - $HOME/.dip/postgres/.psqlrc:/root/.psqlrc:ro
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: psql postgres --command "SELECT 1" -U postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGPASSWORD: postgres
      POSTGRES_DB: dev
    ports:
      - 5432:5432
  # REDIS ------------------------------------------------------------------------------------
  redis:
    image: redis:5-alpine
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30
  # MONGO ------------------------------------------------------------------------------------
  mongo:
    image: mongo:3.6.18
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - 27017:27017
  # PROMETHEUS ------------------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:v2.18.1
    # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
    ports:
      - 9090:9090
      - 9091:9091
      - 9093:9093
      - 9094:9094
    volumes:
      - $HOME/.dip/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    network_mode: host
  # GRAFANA ------------------------------------------------------------------------------------
  grafana:
    image: grafana/grafana:6.5.2
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    network_mode: host
  # LOCALSTACK ------------------------------------------------------------------------------------
  localstack:
    image: localstack/localstack:0.12.9
    network_mode: bridge
    environment:
      SERVICES: sqs,s3
      DATA_DIR: /tmp/localstack/data
      DEFAULT_REGION: eu-west-3
      PORT_WEB_UI: 3000
      DOCKER_HOST: unix:///var/run/docker.sock
      HOST_TMP_FOLDER: /tmp/localstack
    ports:
      - 4566:4566
      - 4571:4571
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
  # MINIO ------------------------------------------------------------------------------------
  minio:
    image: minio/minio
    ports:
      - 9000:9000
    volumes:
      - minio_data:/data
    environment:
      MINIO_ACCESS_KEY: access_key
      MINIO_SECRET_KEY: secret_key
      VIRTUAL_HOST: minio.localhost
      VIRTUAL_PATH: /
    command: ["server", "/data"]
    networks:
      - default
      - frontend
  # ZOOKEEPER ------------------------------------------------------------------------------------
  zk:
    image: confluentinc/cp-zookeeper:5.4.1
    container_name: zk
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  # KAFKA ----------------------------------------------------------------------------------------
  kafka:
    image: confluentinc/cp-kafka:5.4.1
    container_name: kafka
    depends_on:
      - zk
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zk:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  kowl:
    image: quay.io/cloudhut/kowl:v1.2.1
    restart: on-failure
    volumes:
      - $HOME/.dip/kowl/config.yml:/etc/kowl/config.yml
    ports:
      - 9080:8080
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yml
    depends_on:
      - kafka
    environment:
      - VIRTUAL_HOST=kowl.localhost
      - VIRTUAL_PATH=/
    networks:
      - default
      - frontend
  # KAFKA SASL SSL ----------------------------------------------------------------------------------------
  # example from https://github.com/confluentinc/cp-docker-images/blob/5.3.3-post/examples/kafka-cluster-sasl/docker-compose.yml
  zk-sasl:
    image: confluentinc/cp-zookeeper:5.4.1
    container_name: zk-sasl
    ports:
      - 12181:12181
    environment:
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/sasl/zk_jaas.conf
        -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
    volumes:
      - ${HOME}/.dip/kafka/sasl/zk_jaas.conf:/etc/kafka/sasl/zk_jaas.conf
  kafka-sasl-ssl:
    image: confluentinc/cp-kafka:5.4.1
    container_name: kafka-sasl-ssl
    depends_on:
      - zk-sasl
    ports:
      - 19092:19092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zk-sasl:12181
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://localhost:19092
      # encryption
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka_sslkey_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka_truststore_creds
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_SSL_CLIENT_AUTH: required
      # authentication
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/sasl/kafka_jaas.conf
    volumes:
      - ${HOME}/.dip/kafka/secrets:/etc/kafka/secrets
      - ${HOME}/.dip/kafka/sasl/kafka_jaas.conf:/etc/kafka/sasl/kafka_jaas.conf

# Volumes to avoid rebuilding dependencies every time you run your projects!
volumes:
  grafana_data:
  localstack_data:
  minio_data:
  mongo_data:
  postgres_data:
  postgres_history:
  redis_data:

networks:
  frontend:
    external:
      name: frontend
