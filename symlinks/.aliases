# --------------------------------------------------------
# Shortcuts
# --------------------------------------------------------
alias v="nvim"
alias ez="v ~/.zshrc"
alias ddgr="BROWSER=w3m ddgr -n 5"
# sudo
alias sudo="sudo "
alias _="sudo "
alias please="sudo "

# --------------------------------------------------------
# Default options
# --------------------------------------------------------
alias grep="rg"
alias top="procs --watch --sortd cpu"
alias watch="viddy"
# Prevent recursive change on root directory
alias chmod="chmod --preserve-root"
alias chown="chown --preserve-root"
# copy with a progress bar.
alias cpv="rsync -apoghb --backup-dir=/tmp -e /dev/null --inplace --info=progress2 --"
# Compute space disk
alias df="df -Th"
# alias du="du -sh *"
alias du="dust"
# Record a GIF
alias gif="byzanz-record --duration=5 --x=250 --y=235 --width=1200 --height=800 ~/tmp/byzanz.gif"
# Check used port
alias usedports="netstat -taupen"
alias who-use-that-port="lsof -i" # losf -i :8000
alias rmf="rm -rf"
# tar
alias tarx="tar xzvf"
alias tarc="tar czvf"
# lsd
alias l="lsd -la --group-dirs first"
# prettyping
alias ping="prettyping --nolegend"
# find configured local DNS servers
alias find-dns-servers="nmcli dev show | grep 'IP4.DNS'"
# weather
alias weather="curl https://wttr.in/"
# docker
alias d="docker"
alias dc="docker compose"
# ansible
alias a="docker run -it --rm -e ANSIBLE_VAULT_PASSWORD_FILE=/home/python/.vaultkey -e ANSIBLE_CALLBACK_PLUGINS=/usr/local/lib/ansible_stdout_compact_logger -e ANSIBLE_STDOUT_CALLBACK=anstomlog -v ~/.aws:/home/python/.aws -v ~/.ssh/id_rsa:/home/python/.ssh/id_rsa -v ~/work/big-cloud:/home/python/big-cloud -v ~/.vaultkey:/home/python/.vaultkey -v ~/apps/ansible_stdout_compact_logger:/usr/local/lib/ansible_stdout_compact_logger -w /home/python/big-cloud registry.bioserenity.com/bioserenity/cd-builder ansible"
alias ansible-galaxy="docker run -it --rm -e ANSIBLE_VAULT_PASSWORD_FILE=/home/python/.vaultkey -e ANSIBLE_CALLBACK_PLUGINS=/usr/local/lib/ansible_stdout_compact_logger -e ANSIBLE_STDOUT_CALLBACK=anstomlog -v ~/.aws:/home/python/.aws -v ~/.ssh/id_rsa:/home/python/.ssh/id_rsa -v ~/work/big-cloud:/home/python/big-cloud -v ~/.vaultkey:/home/python/.vaultkey -v ~/apps/ansible_stdout_compact_logger:/usr/local/lib/ansible_stdout_compact_logger -w /home/python/big-cloud registry.bioserenity.com/bioserenity/cd-builder ansible-galaxy"
alias ap="docker run -it --rm -e ANSIBLE_CALLBACK_PLUGINS=/usr/local/lib/ansible_stdout_compact_logger -e ANSIBLE_STDOUT_CALLBACK=anstomlog -v ~/.aws:/home/python/.aws -v ~/.ssh/id_rsa:/home/python/.ssh/id_rsa -v ~/work/big-cloud:/home/python/big-cloud -v ~/apps/ansible_stdout_compact_logger:/usr/local/lib/ansible_stdout_compact_logger -w /home/python/big-cloud/ansible registry.bioserenity.com/bioserenity/cd-builder ansible-playbook"
alias apm="docker run -it --rm -e ANSIBLE_VAULT_PASSWORD_FILE=/home/python/.vaultkey -e ANSIBLE_CALLBACK_PLUGINS=/usr/local/lib/ansible_stdout_compact_logger -e ANSIBLE_STDOUT_CALLBACK=anstomlog -v ~/.aws:/home/python/.aws -v ~/.ssh/id_rsa:/home/python/.ssh/id_rsa -v ~/work/ansible-monitoring:/home/python/ansible-monitoring -v ~/.vaultkey:/home/python/.vaultkey -v ~/apps/ansible_stdout_compact_logger:/usr/local/lib/ansible_stdout_compact_logger -w /home/python/ansible-monitoring registry.bioserenity.com/bioserenity/cd-builder ansible-playbook"
alias mitogen="docker run -it --rm -e ANSIBLE_CALLBACK_PLUGINS=/usr/local/lib/ansible_stdout_compact_logger -e ANSIBLE_STDOUT_CALLBACK=anstomlog -e ANSIBLE_STRATEGY_PLUGINS=/home/python/ansible_strategy_plugins -e ANSIBLE_STRATEGY=mitogen_linear -v ~/.aws:/home/python/.aws -v ~/.ssh/id_rsa:/home/python/.ssh/id_rsa -v ~/work/big-cloud:/home/python/big-cloud -v ~/apps/ansible_stdout_compact_logger:/usr/local/lib/ansible_stdout_compact_logger -v ~/apps/mitogen/ansible_mitogen/plugins/strategy:/home/python/ansible_strategy_plugins -w /home/python/big-cloud/ansible registry.bioserenity.com/bioserenity/cd-builder ansible-playbook"
# terraform
alias tf="terraform"
# kubernetes
alias k="kubectl"
# minikube
alias mk="minikube"
# helm
alias h="helm"

# --------------------------------------------------------
# GIT
# --------------------------------------------------------
alias g="git"
alias gbdr='git branch -r | awk "{print \$1}" | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}" | xargs git branch -D'
alias gup='git fetch --all --prune && git checkout develop && git pull && gbdr'
alias gupm='git fetch --all --prune && git checkout master && git pull && gbdr'
alias gcb='git branch | fzf --header Checkout | xargs git checkout'
alias gbd='git branch | fzf --header "Branch to delete" | xargs git branch -D'
alias gchurn='git log --format=format: --name-only --since=12.month | egrep -v "^\$" | sort | uniq -c | sort -nr | head -50'
alias batdiff='git diff --name-only --diff-filter=d | xargs bat --diff'

# --------------------------------------------------------
# Custom functions
# --------------------------------------------------------
diffc() {
  diff -u $1 $2|colordiff|less -R
}
# test gitlab ci jobs
ci() {
  [[ ! -f .gitlab-ci.yml ]] && echo "Missing .gitlab-ci.yml file" 1>&2 && return 1
  [[ $# -eq 0 ]] && echo "Missing job name" 1>&2 && return 1
  gitlab-runner exec docker --docker-volumes /var/run/docker.sock:/var/run/docker.sock $1
}
# test terraform
terraform-test() {
  local files=($(echo ${1} | tr "," "\n"))
  local env=${2:-stg-eu-fr}
  local target_flags=""

  for f in ${files[@]}; do
    targets=($(cat ${f} | grep 'resource "' | grep -oEi '"[a-z0-9_-]+" "[a-z0-9_-]+"' | sed 's/"//g' | sed 's/ /./g'))
    for target in ${targets[@]}; do
      target_flags+="--target=${target} "
    done
  done

  local cmd="terraform plan -out=tfplan -var-file=../../config/${env}.tfvars ${target_flags}"
  echo "${cmd}"
  echo "${cmd}" | clipcopy
  echo "Copied to clipboard"
}
# docker
docker-exec() {
  local cmd=$1
  local cid
  cid=$(docker ps | sed 1d | fzf -1 -q "$2" | awk '{print $1}')

  [ -n "$cid" ] && docker exec -it "$cid" "$cmd"
}
# like normal z when used with arguments but displays an fzf prompt when used without.
unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}
# time shell load time
timesh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}
# synchronize AWS s3
aws_sync_perso() {
  local folder_name=$(pwd | awk -F'/' '{ print $NF }')
  aws s3 sync . "s3://${folder_name}" --storage-class ONEZONE_IA --delete --profile perso
}
# git checkout shortcut to add the task type, the jira id and the branch name
gco() {
  local branch_type=$(echo "feature\nbugfix\ntask\nrefactor" | gum filter --placeholder "branch type")
  local jira_task_id=$(gum input --placeholder "jira task ID")

  local branch_name=$(gum input --value "${branch_type}/CLOUD-$jira_task_id/" --placeholder "branch name")

  git checkout -b "${branch_name}"
}
# git commit shortcut
gci() {
  local type=$(echo "feat\nfix\nchore\ntask\nrefactor\nci\ncd\nbuild" | gum filter --placeholder "type")
  local scope=$(gum input --value "$(git rev-parse --abbrev-ref HEAD | awk -F'/' '{ print $2 }')" --placeholder "scope")

  test -n "${scope}" && scope="(${scope})"

  local summary=$(gum input --value "${type}${scope}: " --placeholder "summary of the change" --width 50)
  local description=$(gum write --placeholder "detail of the change" --width 80)

  git add -A && git commit -m "${summary}" -m "${description}"
}
# git push remote
gpush() {
  local branch_name=$(git rev-parse --abbrev-ref HEAD)

  git push -u origin ${branch_name}
}
